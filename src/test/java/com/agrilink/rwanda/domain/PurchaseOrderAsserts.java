package com.agrilink.rwanda.domain;

import static com.agrilink.rwanda.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PurchaseOrderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseOrderAllPropertiesEquals(PurchaseOrder expected, PurchaseOrder actual) {
        assertPurchaseOrderAutoGeneratedPropertiesEquals(expected, actual);
        assertPurchaseOrderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseOrderAllUpdatablePropertiesEquals(PurchaseOrder expected, PurchaseOrder actual) {
        assertPurchaseOrderUpdatableFieldsEquals(expected, actual);
        assertPurchaseOrderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseOrderAutoGeneratedPropertiesEquals(PurchaseOrder expected, PurchaseOrder actual) {
        assertThat(actual)
            .as("Verify PurchaseOrder auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseOrderUpdatableFieldsEquals(PurchaseOrder expected, PurchaseOrder actual) {
        assertThat(actual)
            .as("Verify PurchaseOrder relevant properties")
            .satisfies(a -> assertThat(a.getOrderDate()).as("check orderDate").isEqualTo(expected.getOrderDate()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a ->
                assertThat(a.getTotalAmount())
                    .as("check totalAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalAmount())
            )
            .satisfies(a -> assertThat(a.getDeliveryAddress()).as("check deliveryAddress").isEqualTo(expected.getDeliveryAddress()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseOrderUpdatableRelationshipsEquals(PurchaseOrder expected, PurchaseOrder actual) {
        // empty method
    }
}
