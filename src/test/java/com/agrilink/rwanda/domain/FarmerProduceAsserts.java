package com.agrilink.rwanda.domain;

import static com.agrilink.rwanda.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class FarmerProduceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerProduceAllPropertiesEquals(FarmerProduce expected, FarmerProduce actual) {
        assertFarmerProduceAutoGeneratedPropertiesEquals(expected, actual);
        assertFarmerProduceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerProduceAllUpdatablePropertiesEquals(FarmerProduce expected, FarmerProduce actual) {
        assertFarmerProduceUpdatableFieldsEquals(expected, actual);
        assertFarmerProduceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerProduceAutoGeneratedPropertiesEquals(FarmerProduce expected, FarmerProduce actual) {
        assertThat(actual)
            .as("Verify FarmerProduce auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerProduceUpdatableFieldsEquals(FarmerProduce expected, FarmerProduce actual) {
        assertThat(actual)
            .as("Verify FarmerProduce relevant properties")
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a -> assertThat(a.getUnit()).as("check unit").isEqualTo(expected.getUnit()))
            .satisfies(a ->
                assertThat(a.getPricePerUnit())
                    .as("check pricePerUnit")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPricePerUnit())
            )
            .satisfies(a -> assertThat(a.getAvailableFrom()).as("check availableFrom").isEqualTo(expected.getAvailableFrom()))
            .satisfies(a -> assertThat(a.getAvailableUntil()).as("check availableUntil").isEqualTo(expected.getAvailableUntil()))
            .satisfies(a -> assertThat(a.getGrade()).as("check grade").isEqualTo(expected.getGrade()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerProduceUpdatableRelationshipsEquals(FarmerProduce expected, FarmerProduce actual) {
        // empty method
    }
}
